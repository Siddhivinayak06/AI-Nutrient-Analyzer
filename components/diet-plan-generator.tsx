"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Separator } from "@/components/ui/separator"
import { Clock, ChefHat, Leaf, Flame, Shield, Heart, CheckCircle, Star, Calendar, Download, Share } from "lucide-react"
import { ProgressTrackingSystem } from "./progress-tracking-system"

interface MealItem {
  name: string
  portion: string
  calories: number
  nutrients: string[]
  ayurvedicBenefit: string
  prepTime: number
  difficulty: "easy" | "medium" | "hard"
}

interface Meal {
  type: "breakfast" | "mid-morning" | "lunch" | "evening" | "dinner"
  time: string
  items: MealItem[]
  totalCalories: number
  ayurvedicNote: string
  tips: string[]
}

interface DayPlan {
  day: string
  meals: Meal[]
  totalCalories: number
  keyNutrients: string[]
  doshaFocus: string
}

// Mock data - in a real app, this would be generated by AI based on user profile
const mockWeeklyPlan: DayPlan[] = [
  {
    day: "Monday",
    totalCalories: 1850,
    keyNutrients: ["Iron", "Vitamin D", "Omega-3"],
    doshaFocus: "Vata Balancing",
    meals: [
      {
        type: "breakfast",
        time: "7:00 AM",
        totalCalories: 420,
        ayurvedicNote: "Warm, grounding foods to start the day with stability",
        tips: ["Eat slowly and mindfully", "Add a pinch of ginger for digestion"],
        items: [
          {
            name: "Warm Oatmeal with Almonds & Dates",
            portion: "1 bowl (200g)",
            calories: 320,
            nutrients: ["Fiber", "Magnesium", "Iron"],
            ayurvedicBenefit: "Grounds Vata, provides sustained energy",
            prepTime: 10,
            difficulty: "easy",
          },
          {
            name: "Golden Milk (Turmeric Latte)",
            portion: "1 cup (250ml)",
            calories: 100,
            nutrients: ["Calcium", "Curcumin"],
            ayurvedicBenefit: "Anti-inflammatory, calms the nervous system",
            prepTime: 5,
            difficulty: "easy",
          },
        ],
      },
      {
        type: "mid-morning",
        time: "10:00 AM",
        totalCalories: 150,
        ayurvedicNote: "Light snack to maintain energy without overwhelming digestion",
        tips: ["Have with warm water or herbal tea"],
        items: [
          {
            name: "Soaked Almonds & Walnuts",
            portion: "6 almonds + 3 walnuts",
            calories: 150,
            nutrients: ["Omega-3", "Vitamin E", "Magnesium"],
            ayurvedicBenefit: "Nourishes brain, balances Vata",
            prepTime: 0,
            difficulty: "easy",
          },
        ],
      },
      {
        type: "lunch",
        time: "12:30 PM",
        totalCalories: 650,
        ayurvedicNote: "Largest meal when digestive fire is strongest",
        tips: ["Include all six tastes", "Eat in a calm environment"],
        items: [
          {
            name: "Spinach Dal with Brown Rice",
            portion: "1 cup dal + 1 cup rice",
            calories: 450,
            nutrients: ["Iron", "Protein", "B-vitamins"],
            ayurvedicBenefit: "Iron-rich, easy to digest, balances all doshas",
            prepTime: 30,
            difficulty: "medium",
          },
          {
            name: "Roasted Vegetable Salad",
            portion: "1 bowl (150g)",
            calories: 120,
            nutrients: ["Vitamin C", "Fiber", "Antioxidants"],
            ayurvedicBenefit: "Provides variety of nutrients, aids digestion",
            prepTime: 20,
            difficulty: "easy",
          },
          {
            name: "Buttermilk with Cumin",
            portion: "1 glass (200ml)",
            calories: 80,
            nutrients: ["Probiotics", "Calcium"],
            ayurvedicBenefit: "Aids digestion, cools Pitta",
            prepTime: 2,
            difficulty: "easy",
          },
        ],
      },
      {
        type: "evening",
        time: "4:00 PM",
        totalCalories: 180,
        ayurvedicNote: "Light, warming snack to bridge lunch and dinner",
        tips: ["Pair with herbal tea for better digestion"],
        items: [
          {
            name: "Herbal Tea with Dates",
            portion: "1 cup tea + 2 dates",
            calories: 180,
            nutrients: ["Iron", "Potassium", "Antioxidants"],
            ayurvedicBenefit: "Natural sweetness, grounds Vata energy",
            prepTime: 5,
            difficulty: "easy",
          },
        ],
      },
      {
        type: "dinner",
        time: "7:00 PM",
        totalCalories: 450,
        ayurvedicNote: "Light, easily digestible meal to prepare for rest",
        tips: ["Finish eating 3 hours before sleep", "Include warming spices"],
        items: [
          {
            name: "Vegetable Soup with Quinoa",
            portion: "1 large bowl (300ml)",
            calories: 280,
            nutrients: ["Protein", "Fiber", "Vitamins"],
            ayurvedicBenefit: "Light, nourishing, easy to digest",
            prepTime: 25,
            difficulty: "medium",
          },
          {
            name: "Steamed Broccoli with Ghee",
            portion: "1 cup (100g)",
            calories: 170,
            nutrients: ["Vitamin K", "Folate", "Healthy fats"],
            ayurvedicBenefit: "Provides essential nutrients, ghee aids absorption",
            prepTime: 10,
            difficulty: "easy",
          },
        ],
      },
    ],
  },
  // Additional days would follow similar structure
]

const nutritionalHighlights = [
  { nutrient: "Iron", amount: "18mg", target: "15mg", status: "excellent", color: "text-green-600" },
  { nutrient: "Vitamin D", amount: "800 IU", target: "600 IU", status: "good", color: "text-green-600" },
  { nutrient: "Omega-3", amount: "2.1g", target: "2.5g", status: "good", color: "text-yellow-600" },
  { nutrient: "Calcium", amount: "1200mg", target: "1000mg", status: "excellent", color: "text-green-600" },
  { nutrient: "Magnesium", amount: "380mg", target: "400mg", status: "good", color: "text-yellow-600" },
  { nutrient: "Fiber", amount: "32g", target: "25g", status: "excellent", color: "text-green-600" },
]

export function DietPlanGenerator() {
  const [selectedDay, setSelectedDay] = useState("Monday")
  const [selectedTab, setSelectedTab] = useState("daily")
  const [showProgressTracking, setShowProgressTracking] = useState(false)

  const currentDayPlan = mockWeeklyPlan.find((day) => day.day === selectedDay) || mockWeeklyPlan[0]

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case "easy":
        return "text-green-600 bg-green-50"
      case "medium":
        return "text-yellow-600 bg-yellow-50"
      case "hard":
        return "text-red-600 bg-red-50"
      default:
        return "text-gray-600 bg-gray-50"
    }
  }

  const getMealIcon = (mealType: string) => {
    switch (mealType) {
      case "breakfast":
        return "🌅"
      case "mid-morning":
        return "☕"
      case "lunch":
        return "🍽️"
      case "evening":
        return "🫖"
      case "dinner":
        return "🌙"
      default:
        return "🍴"
    }
  }

  if (showProgressTracking) {
    return <ProgressTrackingSystem />
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold mb-2">Your Personalized Diet Plan</h1>
          <p className="text-muted-foreground">
            AI-generated meal plans tailored to your Vata constitution and nutritional needs
          </p>
          <div className="flex justify-center gap-2 mt-4">
            <Badge variant="secondary" className="bg-blue-50 text-blue-700">
              <Leaf className="h-3 w-3 mr-1" />
              Vata Balancing
            </Badge>
            <Badge variant="secondary" className="bg-green-50 text-green-700">
              <Shield className="h-3 w-3 mr-1" />
              Iron Rich
            </Badge>
            <Badge variant="secondary" className="bg-purple-50 text-purple-700">
              <Heart className="h-3 w-3 mr-1" />
              Heart Healthy
            </Badge>
          </div>
        </div>

        <Tabs value={selectedTab} onValueChange={setSelectedTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="daily">Daily Plan</TabsTrigger>
            <TabsTrigger value="nutrition">Nutrition</TabsTrigger>
            <TabsTrigger value="shopping">Shopping List</TabsTrigger>
            <TabsTrigger value="tips">Ayurvedic Tips</TabsTrigger>
          </TabsList>

          {/* Daily Plan Tab */}
          <TabsContent value="daily" className="space-y-6">
            {/* Day Selector */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Calendar className="h-5 w-5" />
                  Weekly Overview
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex flex-wrap gap-2">
                  {["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"].map((day) => (
                    <Button
                      key={day}
                      variant={selectedDay === day ? "default" : "outline"}
                      size="sm"
                      onClick={() => setSelectedDay(day)}
                    >
                      {day}
                    </Button>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Daily Summary */}
            <div className="grid md:grid-cols-3 gap-4">
              <Card>
                <CardContent className="pt-6">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-primary">{currentDayPlan.totalCalories}</div>
                    <p className="text-sm text-muted-foreground">Total Calories</p>
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="pt-6">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-blue-600">{currentDayPlan.doshaFocus}</div>
                    <p className="text-sm text-muted-foreground">Focus</p>
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="pt-6">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-green-600">{currentDayPlan.keyNutrients.length}</div>
                    <p className="text-sm text-muted-foreground">Key Nutrients</p>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Meals */}
            <div className="space-y-6">
              {currentDayPlan.meals.map((meal, mealIndex) => (
                <Card key={mealIndex}>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <CardTitle className="flex items-center gap-3">
                        <span className="text-2xl">{getMealIcon(meal.type)}</span>
                        <div>
                          <div className="capitalize">{meal.type.replace("-", " ")}</div>
                          <div className="text-sm text-muted-foreground font-normal">{meal.time}</div>
                        </div>
                      </CardTitle>
                      <Badge variant="outline">{meal.totalCalories} cal</Badge>
                    </div>
                    <CardDescription>{meal.ayurvedicNote}</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {/* Meal Items */}
                    <div className="space-y-3">
                      {meal.items.map((item, itemIndex) => (
                        <div key={itemIndex} className="border rounded-lg p-4">
                          <div className="flex items-start justify-between mb-2">
                            <div className="flex-1">
                              <h4 className="font-medium">{item.name}</h4>
                              <p className="text-sm text-muted-foreground">
                                {item.portion} • {item.calories} cal
                              </p>
                            </div>
                            <div className="flex items-center gap-2">
                              <Badge className={getDifficultyColor(item.difficulty)} variant="secondary">
                                {item.difficulty}
                              </Badge>
                              <Badge variant="outline" className="text-xs">
                                <Clock className="h-3 w-3 mr-1" />
                                {item.prepTime}m
                              </Badge>
                            </div>
                          </div>

                          <div className="space-y-2">
                            <div>
                              <p className="text-sm">
                                <strong>Nutrients:</strong> {item.nutrients.join(", ")}
                              </p>
                            </div>
                            <div className="bg-muted/50 p-2 rounded text-sm">
                              <strong>Ayurvedic Benefit:</strong> {item.ayurvedicBenefit}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>

                    {/* Tips */}
                    {meal.tips.length > 0 && (
                      <Alert>
                        <Leaf className="h-4 w-4" />
                        <AlertDescription>
                          <strong>Tips:</strong> {meal.tips.join(" • ")}
                        </AlertDescription>
                      </Alert>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Nutrition Tab */}
          <TabsContent value="nutrition" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Daily Nutritional Breakdown</CardTitle>
                <CardDescription>How this plan addresses your specific nutrient needs</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid md:grid-cols-2 gap-6">
                  {nutritionalHighlights.map((item, index) => (
                    <div key={index} className="flex items-center justify-between p-4 border rounded-lg">
                      <div>
                        <h4 className="font-medium">{item.nutrient}</h4>
                        <p className="text-sm text-muted-foreground">Target: {item.target}</p>
                      </div>
                      <div className="text-right">
                        <div className={`text-lg font-bold ${item.color}`}>{item.amount}</div>
                        <Badge variant="outline" className={item.color}>
                          <CheckCircle className="h-3 w-3 mr-1" />
                          {item.status}
                        </Badge>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            <div className="grid md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Macronutrient Distribution</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Carbohydrates (50%)</span>
                      <span>230g</span>
                    </div>
                    <div className="w-full bg-muted rounded-full h-2">
                      <div className="bg-blue-500 h-2 rounded-full" style={{ width: "50%" }}></div>
                    </div>
                  </div>
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Protein (20%)</span>
                      <span>92g</span>
                    </div>
                    <div className="w-full bg-muted rounded-full h-2">
                      <div className="bg-green-500 h-2 rounded-full" style={{ width: "20%" }}></div>
                    </div>
                  </div>
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Healthy Fats (30%)</span>
                      <span>62g</span>
                    </div>
                    <div className="w-full bg-muted rounded-full h-2">
                      <div className="bg-yellow-500 h-2 rounded-full" style={{ width: "30%" }}></div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Ayurvedic Balance</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-3">
                    <div className="flex items-center gap-3">
                      <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                      <span className="text-sm">Vata Pacifying Foods: 60%</span>
                    </div>
                    <div className="flex items-center gap-3">
                      <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                      <span className="text-sm">Pitta Balancing Foods: 25%</span>
                    </div>
                    <div className="flex items-center gap-3">
                      <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                      <span className="text-sm">Kapha Supporting Foods: 15%</span>
                    </div>
                  </div>
                  <Separator />
                  <div className="space-y-2">
                    <h4 className="font-medium text-sm">Six Tastes Balance:</h4>
                    <div className="grid grid-cols-2 gap-2 text-xs">
                      <span>Sweet: ⭐⭐⭐</span>
                      <span>Sour: ⭐⭐</span>
                      <span>Salty: ⭐⭐</span>
                      <span>Pungent: ⭐</span>
                      <span>Bitter: ⭐⭐</span>
                      <span>Astringent: ⭐</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Shopping List Tab */}
          <TabsContent value="shopping" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <ChefHat className="h-5 w-5" />
                  Weekly Shopping List
                </CardTitle>
                <CardDescription>Organized by category for easy shopping</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div>
                    <h4 className="font-semibold mb-3 text-green-600">Vegetables & Fruits</h4>
                    <ul className="space-y-1 text-sm">
                      <li>• Spinach (500g)</li>
                      <li>• Broccoli (300g)</li>
                      <li>• Carrots (500g)</li>
                      <li>• Dates (200g)</li>
                      <li>• Seasonal vegetables</li>
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-semibold mb-3 text-blue-600">Grains & Legumes</h4>
                    <ul className="space-y-1 text-sm">
                      <li>• Brown rice (1kg)</li>
                      <li>• Quinoa (500g)</li>
                      <li>• Moong dal (500g)</li>
                      <li>• Oats (500g)</li>
                      <li>• Whole wheat flour</li>
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-semibold mb-3 text-purple-600">Nuts & Seeds</h4>
                    <ul className="space-y-1 text-sm">
                      <li>• Almonds (200g)</li>
                      <li>• Walnuts (200g)</li>
                      <li>• Flax seeds (100g)</li>
                      <li>• Chia seeds (100g)</li>
                      <li>• Sesame seeds</li>
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-semibold mb-3 text-red-600">Spices & Herbs</h4>
                    <ul className="space-y-1 text-sm">
                      <li>• Turmeric powder</li>
                      <li>• Cumin seeds</li>
                      <li>• Ginger (fresh)</li>
                      <li>• Coriander seeds</li>
                      <li>• Herbal tea blend</li>
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-semibold mb-3 text-yellow-600">Dairy & Alternatives</h4>
                    <ul className="space-y-1 text-sm">
                      <li>• Organic milk (1L)</li>
                      <li>• Ghee (200g)</li>
                      <li>• Yogurt (500g)</li>
                      <li>• Almond milk</li>
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-semibold mb-3 text-gray-600">Pantry Essentials</h4>
                    <ul className="space-y-1 text-sm">
                      <li>• Cold-pressed oils</li>
                      <li>• Rock salt</li>
                      <li>• Jaggery</li>
                      <li>• Vegetable broth</li>
                    </ul>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Ayurvedic Tips Tab */}
          <TabsContent value="tips" className="space-y-6">
            <div className="grid md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Flame className="h-5 w-5 text-red-600" />
                    Enhancing Agni (Digestive Fire)
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <ul className="space-y-2 text-sm">
                    <li>• Start meals with a small piece of fresh ginger with rock salt</li>
                    <li>• Drink warm water throughout the day, avoid ice-cold beverages</li>
                    <li>• Include digestive spices: cumin, coriander, fennel in cooking</li>
                    <li>• Eat your largest meal at midday when digestive fire is strongest</li>
                    <li>• Allow 3-4 hours between meals for proper digestion</li>
                  </ul>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Leaf className="h-5 w-5 text-blue-600" />
                    Vata Balancing Practices
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <ul className="space-y-2 text-sm">
                    <li>• Eat warm, cooked foods rather than raw or cold items</li>
                    <li>• Maintain regular meal times to create routine and stability</li>
                    <li>• Include healthy fats like ghee, olive oil, and nuts daily</li>
                    <li>• Favor sweet, sour, and salty tastes over bitter and astringent</li>
                    <li>• Create a calm, peaceful environment for eating</li>
                  </ul>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Clock className="h-5 w-5 text-green-600" />
                    Optimal Meal Timing
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <ul className="space-y-2 text-sm">
                    <li>• Breakfast: 7-8 AM (light to moderate)</li>
                    <li>• Lunch: 12-1 PM (largest meal of the day)</li>
                    <li>• Dinner: 6-7 PM (light and early)</li>
                    <li>• Finish eating 3 hours before bedtime</li>
                    <li>• Allow 12-hour gap between dinner and breakfast</li>
                  </ul>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Heart className="h-5 w-5 text-purple-600" />
                    Mindful Eating Practices
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <ul className="space-y-2 text-sm">
                    <li>• Eat without distractions (no TV, phone, or reading)</li>
                    <li>• Chew each bite thoroughly (20-30 times)</li>
                    <li>• Express gratitude before meals</li>
                    <li>• Stop eating when 75% full</li>
                    <li>• Take a short walk after meals to aid digestion</li>
                  </ul>
                </CardContent>
              </Card>
            </div>

            <Alert>
              <Star className="h-4 w-4" />
              <AlertDescription>
                <strong>Remember:</strong> This plan is designed specifically for your Vata constitution and current
                nutritional needs. Listen to your body and adjust portions based on your hunger, energy levels, and how
                foods make you feel. Consistency is more important than perfection in Ayurvedic nutrition.
              </AlertDescription>
            </Alert>
          </TabsContent>
        </Tabs>

        {/* Action Buttons */}
        <div className="flex justify-center gap-4 mt-8">
          <Button variant="outline" size="lg">
            <Download className="mr-2 h-4 w-4" />
            Download PDF
          </Button>
          <Button variant="outline" size="lg">
            <Share className="mr-2 h-4 w-4" />
            Share Plan
          </Button>
          <Button size="lg" onClick={() => setShowProgressTracking(true)}>
            Start Tracking Progress
          </Button>
        </div>
      </div>
    </div>
  )
}
